Functions In SQL Server
	Function Is Peace OF Code Which Can be Used reduce the Code ReWriting
	In SQL Server We Have 2 Types Of Functions
		1) System Function
		2) User Defined Function
		
	1) System Functions
		By Default These are Available In System
			1) Aggreagted Function
				A) SUM
				B) MAX
				C) MIN
				D) Avg
				E) COUNT
			2) DateTime Functions
				A) GETDATE()
					It Should Return Today Dattime
				B) GETUTCDATE()
					It Should Retrun UTC TimeZone Datetime
				C) DATEADD
					DateAdd Is USed to Add the Dates Either BackWard Or Forward
						DATEADD(Intervel,IncrementInt,Expression)
				D) DATEDIFF
					To Identify the Difference Between 2 Dates
						DATEDIFF(Intervel,StarTDate,EndDate)
				E) DATENAME
					Is USed to Retun the MonthName Or WeekName
				F) DATEPART
					DATEPART Is USed to Split the Intervels
			3) String Functions
				A) Len
				B) Left
				C) Right
				D) LTRIM
				E) RTRIM
				F) CHARINDEX
				G) PATINDEX
				H) SUBSTRING
				I) REPLACE
				J) STUFF
				K) REPLICATE
				L) REVERSE
				M) QUoteName
				N) Upper
				O) Lower
			4) Mathematical Functions
				A) Floor
				B) Ceiling
				C) SIGN
			5) Conversion Functions
				1) CAST
					CAST(Expresssion As TargetDatatype)
				2) CONVERT
					CONVERT(TargetDattype,Expression)
				3) TRY_CONVERT
				4) TRY_CAST 
	2) User Defined Functions
		These Fucntions are Created By Users
		A) Scalar User Defined 
			It Will Return Single Value
		B) InlIne Table Valued
			It Will Return Table Of Values
		C) MultiLine Table Valued Function
			It Will Return Table Of Values

Syntax For Scalar Functions
	CREATE [ OR ALTER ] FUNCTION [ schema_name. ] function_name
( [ { @parameter_name [ AS ][ type_schema_name. ] parameter_data_type
 [ = default ] [ READONLY ] }
    [ ,...n ]
  ]
)
RETURNS return_data_type
    [ WITH <function_option> [ ,...n ] ]
    [ AS ]
    BEGIN
	RETURN
	(
        function_body
         scalar_expression
	)
    END
[ ; ]


Syntax For InlIne Table Valued Function
	CREATE [ OR ALTER ] FUNCTION [ schema_name. ] function_name
( [ { @parameter_name [ AS ] [ type_schema_name. ] parameter_data_type
    [ = default ] [ READONLY ] }
    [ ,...n ]
  ]
)
RETURNS TABLE
    [ WITH <function_option> [ ,...n ] ]
    [ AS ]
    RETURN [ ( ] select_stmt [ ) ]
[ ; ]


Syntax FOr MUltiStatement Table Valued Function
	-- Transact-SQL Multi-Statement Table-Valued Function Syntax
CREATE [ OR ALTER ] FUNCTION [ schema_name. ] function_name
( [ { @parameter_name [ AS ] [ type_schema_name. ] parameter_data_type
    [ = default ] [READONLY] }
    [ ,...n ]
  ]
)
RETURNS @return_variable TABLE <table_type_definition>
    [ WITH <function_option> [ ,...n ] ]
    [ AS ]
    BEGIN
        function_body
        RETURN
    END
[ ; ]
	
SELECT * INTO SampleSalesData FROM Sales.SalesOrderDetail
WHERE 1=2

DROP TABLE SampleSalesData

SELECT * FROM SampleSalesData



DateTime FOrmat Options
1	select convert(varchar, getdate(), 1)	mm/dd/yy	12/30/06
2	select convert(varchar, getdate(), 2)	yy.mm.dd	06.12.30
3	select convert(varchar, getdate(), 3)	dd/mm/yy	30/12/06
4	select convert(varchar, getdate(), 4)	dd.mm.yy	30.12.06
5	select convert(varchar, getdate(), 5)	dd-mm-yy	30-12-06
6	select convert(varchar, getdate(), 6)	dd-Mon-yy	30 Dec 06
7	select convert(varchar, getdate(), 7)	Mon dd, yy	Dec 30, 06
10	select convert(varchar, getdate(), 10)	mm-dd-yy	12-30-06
11	select convert(varchar, getdate(), 11)	yy/mm/dd	06/12/30
12	select convert(varchar, getdate(), 12)	yymmdd	061230
23	select convert(varchar, getdate(), 23)	yyyy-mm-dd	2006-12-30
101	select convert(varchar, getdate(), 101)	mm/dd/yyyy	12/30/2006
102	select convert(varchar, getdate(), 102)	yyyy.mm.dd	2006.12.30
103	select convert(varchar, getdate(), 103)	dd/mm/yyyy	30/12/2006
104	select convert(varchar, getdate(), 104)	dd.mm.yyyy	30.12.2006
105	select convert(varchar, getdate(), 105)	dd-mm-yyyy	30-12-2006
106	select convert(varchar, getdate(), 106)	dd Mon yyyy	30 Dec 2006
107	select convert(varchar, getdate(), 107)	Mon dd, yyyy	Dec 30, 2006
110	select convert(varchar, getdate(), 110)	mm-dd-yyyy	12-30-2006
111	select convert(varchar, getdate(), 111)	yyyy/mm/dd	2006/12/30
112	select convert(varchar, getdate(), 112)	yyyymmdd	20061230
 	
TIME ONLY FORMATS
8	select convert(varchar, getdate(), 8)	hh:mm:ss	00:38:54
14	select convert(varchar, getdate(), 14)	hh:mm:ss:nnn	00:38:54:840
24	select convert(varchar, getdate(), 24)	hh:mm:ss	00:38:54
108	select convert(varchar, getdate(), 108)	hh:mm:ss	00:38:54
114	select convert(varchar, getdate(), 114)	hh:mm:ss:nnn	00:38:54:840
 	
DATE & TIME FORMATS
0	select convert(varchar, getdate(), 0)	Mon dd yyyy hh:mm AM/PM	Dec 30 2006 12:38AM
9	select convert(varchar, getdate(), 9)	Mon dd yyyy hh:mm:ss:nnn AM/PM	Dec 30 2006 12:38:54:840AM
13	select convert(varchar, getdate(), 13)	dd Mon yyyy hh:mm:ss:nnn AM/PM	30 Dec 2006 00:38:54:840AM
20	select convert(varchar, getdate(), 20)	yyyy-mm-dd hh:mm:ss	2006-12-30 00:38:54
21	select convert(varchar, getdate(), 21)	yyyy-mm-dd hh:mm:ss:nnn	2006-12-30 00:38:54.840
22	select convert(varchar, getdate(), 22)	mm/dd/yy hh:mm:ss AM/PM	12/30/06 12:38:54 AM
25	select convert(varchar, getdate(), 25)	yyyy-mm-dd hh:mm:ss:nnn	2006-12-30 00:38:54.840
100	select convert(varchar, getdate(), 100)	Mon dd yyyy hh:mm AM/PM	Dec 30 2006 12:38AM
109	select convert(varchar, getdate(), 109)	Mon dd yyyy hh:mm:ss:nnn AM/PM	Dec 30 2006 12:38:54:840AM
113	select convert(varchar, getdate(), 113)	dd Mon yyyy hh:mm:ss:nnn	30 Dec 2006 00:38:54:840
120	select convert(varchar, getdate(), 120)	yyyy-mm-dd hh:mm:ss	2006-12-30 00:38:54
121	select convert(varchar, getdate(), 121)	yyyy-mm-dd hh:mm:ss:nnn	2006-12-30 00:38:54.840
126	select convert(varchar, getdate(), 126)	yyyy-mm-dd T hh:mm:ss:nnn	2006-12-30T00:38:54.840
127	select convert(varchar, getdate(), 127)	yyyy-mm-dd T hh:mm:ss:nnn	2006-12-30T00:38:54.840
 	
ISLAMIC CALENDAR DATES
130	select convert(nvarchar, getdate(), 130)	dd mmm yyyy hh:mi:ss:nnn AM/PM	date output
131	select convert(nvarchar, getdate(), 131)	dd mmm yyyy hh:mi:ss:nnn AM/PM	10/12/1427 12:38:54:840AM


SELECT DATEPART(YEAR, GETDATE()) AS 'Year';	Year	2019
SELECT DATEPART(QUARTER, GETDATE()) AS 'Quarter';	Quarter	1
SELECT DATEPART(MONTH, GETDATE()) AS 'Month';	Month	3
SELECT DATEPART(DAYOFYEAR, GETDATE()) AS 'DayOfYear';	DayOfYear	67
SELECT DATEPART(DAY, GETDATE()) AS 'Day';	Day	8
SELECT DATEPART(WEEK, GETDATE()) AS 'Week';	Week	10
SELECT DATEPART(WEEKDAY, GETDATE()) AS 'WeekDay';	WeekDay	6
SELECT DATEPART(HOUR, GETDATE()) AS 'Hour';	Hour	10
SELECT DATEPART(MINUTE, GETDATE()) AS 'Minute';	Minute	36
SELECT DATEPART(SECOND, GETDATE()) AS 'Second';	Second	14
SELECT DATEPART(MILLISECOND, GETDATE()) AS 'MilliSecond';	MilliSecond	43
SELECT DATEPART(MICROSECOND, GETDATE()) AS 'MicroSecond';	MicroSecond	43333
SELECT DATEPART(NANOSECOND, GETDATE()) AS 'NanoSecond';	NanoSecond	43333333
SELECT DATEPART(ISO_WEEK, GETDATE()) AS 'Week';	Week	10