-------------------------------------INdexes------------------------------	Indexes are Used to Improve Query Reading Performance.
		In SQL Server We Have 4 Types Of Indexes
			1) Clustered Index
			2) NON Clustered Index
			3) Unique Indexes
			4) Column Store Index	
		CLUSTERED INDEX:
		A clustered index defines the order in which data is physically stored in a table. Table data can be sorted in only way, therefore, there can be only one clustered index per table. In SQL Server, the primary key constraint automatically creates a clustered index on that particular column.

	Syntax:
	CREATE CLUSTERED INDEX <index_name>
	ON <table_name>(<column_name> ASC/DESC)

		NON CLUSTERED INDEX: 
		A non-clustered index doesnâ€™t sort the physical data inside the table. In fact, a non-clustered index is stored at one place and table data is stored in another place. This is similar to a textbook where the book content is located in one place and the index is located in another. This allows for more than one non-clustered index per table.
		
	Syntax:
	CREATE NONCLUSTERED INDEX <index_name>
	ON <table_name>(<column_name> ASC/DESC)
	
		UNIQUE INDEXES:
		A unique index ensures the index key columns do not contain any duplicate values. ... Any attempt to insert or update data into the unique index key columns that causes the duplicate will result in an error. A unique index can be clustered or non-clustered.

		COLUMN STORE INDEX:
		Columnstore indexes are the standard for storing and querying large data warehousing fact tables. This index uses column-based data storage and query processing to achieve gains up to 10 times the query performance in your data warehouse over traditional row-oriented storage.
	Syntax:
	CREATE CLUSTERED COLUMNSTORE INDEX index_name  
    	ON { database_name.schema_name.table_name | schema_name.table_name | table_name }  
    	[ WITH ( < with_option> [ ,...n ] ) ]  
    	[ ON <on_option> ] 
	[ ; ] 

	Syntax:
	CREATE [NONCLUSTERED]  COLUMNSTORE INDEX index_name   
    	ON { database_name.schema_name.table_name | schema_name.table_name | table_name }
        	( column  [ ,...n ] )  
    	[ WHERE <filter_expression> [ AND <filter_expression> ] ]
	    [ WITH ( < with_option> [ ,...n ] ) ]  
    	[ ON <on_option> ]
	[ ; ]  
	
	
How to Disable Indexes 
	ALTER INDEX <IndexName>
	ON <tableName>	
	Disable