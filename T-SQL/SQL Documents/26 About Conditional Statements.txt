Conditional Statements
	In SQL Server We Haev Conditional Statements
		1) IF
		2) IIF
		3) CASE
		4) While
	1) IF
		The SQL If Else statement is one of the most useful decision-making statements. SQL If statement will test the condition first, and depending upon the result, it will execute the statements.
		If the test condition in SQL If statement is true, the statements inside the if block will execute. Otherwise, statements inside the Else block executed. Let us see the syntax of the SQL Server If Else condition:

	Syntax:
		IF (Test condition or Expression)
		BEGIN
		  -- If the condition is TRUE then these statements will be executed
		  True statements;
		END

		ELSE
		BEGIN
		   -- If the condition is FALSE then these statements will be executed
		   False statements;
		END
		
		IF OBJECT_ID('Employee','U') IS NOT NULL
		BEGIN
			DROP TABLE Employee
		END
		Else
		BEGIN
			CREATE TABLE Employee
			(
			EMPID INT,
			EMPName VARCHAR(1000),
			Salary MONEY
			)
		END
	2) IIF
		The IIF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.
		
		SYntax:
		IIF(condition, value_if_true, value_if_false)
		Example:
		SELECT IIF( OrderQty>10 AND UnitPrice>5000,'High','Low') AS Ranking
		FROM Sales.SalesOrderDetail 
		
		SELECT IIF( OrderQty>5 AND UnitPrice>25000,'High',IIF(OrderQty>0 OR UnitPrice>20000,'Medium','Low')) AS Ranking
		FROM Sales.SalesOrderDetail 
		
		
		SELECT IIF( COUNT(OrderQty)>30 AND SUM(UnitPrice)>25000,'High',IIF(COUNT(OrderQty)>20 AND SUM(UnitPrice)>20000,'Medium','Low')) AS Ranking
		FROM Sales.SalesOrderDetail 
		
		SELECT ProductID,COUNT(OrderQty),SUM(UnitPrice),IIF( COUNT(OrderQty)>60 AND SUM(UnitPrice)>25000,'High',IIF(COUNT(OrderQty) BETWEEN 30 AND 20 AND SUM(UnitPrice)>20000,'Medium','Low')) AS Ranking
		FROM Sales.SalesOrderDetail 
		GROUP BY ProductID
	3) CASE
		The SQL Case Statement is similar to the control flow statements (something like IF ELSE). This SQL Server Case statement evaluates the series of conditional expressions provided in CASE WHEN and returns the result set.
		
		Syntax:
		-- Simple SQL Server Case Statement Syntax
		CASE Input_Expression
			WHEN test_expression THEN result_expression
			.........
			ELSE default_expression
		END
		
		SELECT ST.Name AS TerritoryName
			,ST.SalesYTD
			,ST.SalesLastYear
			,P.FirstName
			,P.MiddleName
			,P.LastName
			,CASE WHEN ST.SalesLastYear>ST.SalesYTD
				THEN 'Good'
				ELSE
				'NO'
				END
		FROM [Sales].[SalesPerson] SP
		INNER JOIN [Sales].[SalesTerritory] ST ON SP.TerritoryID=ST.TerritoryID
		INNER JOIN  [Person].[Person] P ON SP.BusinessEntityID=P.BusinessEntityID
	4) WHILE Loop
		
		SYnTax:
		WHILE condition
		BEGIN
		//SQL Statements
		END;
	EXAMPLE:
	Printing Numbers 

	DECLARE @count INT;
	SET @count = 1;
		
	WHILE @count<= 5
	BEGIN
	PRINT @count
	SET @count = @count + 1;
	END;
	
	Printing Numbers With Print Statement
	DECLARE @Counter INT 
	SET @Counter=1
	WHILE ( @Counter <= 10)
	BEGIN
		PRINT 'The counter value is = ' + CONVERT(VARCHAR,@Counter)
		SET @Counter  = @Counter  + 1
	END
	
	Example: For Finding Missing Numbers In Table Column
	
	DECLARE @MInValue INT,@MaxValue INT

	SELECT @MInValue=MIN(PersonID),@MaxValue=MAX(PersonID) FROM Persons
	
	IF OBJECT_ID('tempdb..#MissingIDSeq','U') IS NOT NULL
	DROP TABLE #MissingIDSeq
		create table #MissingIDSeq
		(
			id int
		)
	
		WHIle @MInValue<@MaxValue
		BEGIN
		INSERT INTO #MissingIDSeq
		VALUES(@MInValue)
		SET @MInValue=@MInValue+1
		END
		SELECT A.id
			FROM #MissingIDSeq AS A
			LEFT JOIN Persons AS B ON A.id=B.PersonID
		WHERE B.PersonID IS NULL
	